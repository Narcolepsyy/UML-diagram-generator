import streamlit as st
import dotenv
import os
import base64
import anthropic
import openai
import json
import docx
import re
import uuid
from plantuml import PlantUML

dotenv.load_dotenv()

def file_to_base64(file):
    with open(file, "rb") as f:
        return base64.b64encode(f.read())

def assign_story_ids(stories):
    """Assign a unique UUID to each user story and return as list of dicts."""
    return [{"id": str(uuid.uuid4()), "text": s} for s in stories]

def classify_user_story(stories, selected_model, anthropic_api_key, openai_api_key):
    prompt = f"""
        {stories}

        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch h·ªá th·ªëng ph·∫ßn m·ªÅm. H√£y ph√¢n lo·∫°i c√°c c√¢u chuy·ªán ng∆∞·ªùi d√πng (user stories) th√†nh c√°c lo·∫°i sau: 
        - Functional
        - Non-Functional

        Tr·∫£ v·ªÅ JSON v·ªõi ƒë·ªãnh d·∫°ng sau:
        {{
            "Functional": [
                "C√¢u chuy·ªán ng∆∞·ªùi d√πng 1",
                "C√¢u chuy·ªán ng∆∞·ªùi d√πng 2"
            ],
            "Non-Functional": [
                "C√¢u chuy·ªán ng∆∞·ªùi d√πng 3",
                "C√¢u chuy·ªán ng∆∞·ªùi d√πng 4"
            ]
        }}
    """
    if selected_model == "Anthropic Claude":
        client = anthropic.Client(api_key=anthropic_api_key)
        message = client.messages.create(
            model=selected_model,
            max_tokens=8096,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1,
        )
        response_text = message.content[0].text
    else:
        openai.api_key = openai_api_key
        response = openai.chat.completions.create(
            model=selected_model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=8096,
            temperature=0.1,
        )
        response_text = response.choices[0].message.content
    # list 
    match = re.search(r'```json\n(.*?)\n```', response_text, re.DOTALL)
    data = json.loads(match.group(1)) if match else json.loads(response_text)
    return data

def display_functional_checklist(functional_stories):
    st.write("## Functional User Stories Checklist")
    for story in functional_stories:
        st.checkbox(story["text"], value=False)

def generate_class_plantuml(data):
    plantuml_code = "@startuml\nskinparam classAttributeIconSize 0\n\n"
    for cls in data['classes']:
        plantuml_code += f"class {cls['name']} {{\n"
        for attr in cls['attributes']:
            plantuml_code += f"  {attr}\n"
        for method in cls['methods']:
            plantuml_code += f"  {method}\n"
        plantuml_code += "}\n\n"
    for relation in data['relationships']:
        entity1 = relation[0]
        entity2 = relation[1]
        relation_type = relation[2]
        multiplicity = relation[3]
        if relation_type == "Inheritance":
            plantuml_code += f"{entity1} <|-- {entity2}\n"
        elif relation_type == "Association":
            if '-' in multiplicity:
                multiplicity_start, multiplicity_end = multiplicity.split('-')
                plantuml_code += f"{entity1} \"{multiplicity_start}\" --> \"{multiplicity_end}\" {entity2}\n"
            else:
                plantuml_code += f"{entity1} --> {entity2}\n"
        elif relation_type == "Aggregation":
            plantuml_code += f"{entity1} o-- {entity2}\n"
        elif relation_type == "Composition":
            plantuml_code += f"{entity1} *-- {entity2}\n"
    plantuml_code += "\n@enduml"
    return plantuml_code

def generate_sequence_plantuml(data):
    plantuml_code = "@startuml\n"
    for obj in data['objects']:
        plantuml_code += f"participant {obj}\n"
    for msg in data['messages']:
        sender = msg[0]
        receiver = msg[1]
        message = msg[2]
        plantuml_code += f"{sender} -> {receiver}: {message}\n"
    plantuml_code += "@enduml"
    return plantuml_code

def generate_deployment_plantuml(data):
    plantuml_code = "@startuml\n"
    # Sinh node v·ªõi alias v√† service/artifact ƒë√∫ng chu·∫©n
    for component in data.get('components', []):
        node_name = component['name']
        plantuml_code += f'node "{node_name}" as {node_name} {{\n'
        for service in component.get('services', []):
            plantuml_code += f'  [{service}]\n'
        plantuml_code += '}\n'
    # Sinh k·∫øt n·ªëi gi·ªØa c√°c node
    for relation in data.get('relationships', []):
        if len(relation) == 3:
            plantuml_code += f'{relation[0]} --> {relation[1]} : {relation[2]}\n'
        elif len(relation) == 2:
            plantuml_code += f'{relation[0]} --> {relation[1]}\n'
    plantuml_code += "@enduml"
    return plantuml_code

def generate_agile_process_plantuml():
    """
    Sinh PlantUML cho quy tr√¨nh Agile/Scrum t·ªïng qu√°t c·ªßa ·ª©ng d·ª•ng.
    """
    return '''@startuml
!define RECTANGLE class
RECTANGLE "Product Backlog" as Backlog
RECTANGLE "Sprint Planning" as Planning
RECTANGLE "Sprint Backlog" as SprintBacklog
RECTANGLE "Daily Scrum" as Daily
RECTANGLE "Sprint" as Sprint
RECTANGLE "Increment" as Increment
RECTANGLE "Sprint Review" as Review
RECTANGLE "Sprint Retrospective" as Retro

Backlog --> Planning : "Ch·ªçn user story"
Planning --> SprintBacklog : "L·∫≠p k·∫ø ho·∫°ch sprint"
SprintBacklog --> Sprint : "Th·ª±c hi·ªán sprint"
Sprint --> Daily : "H·ªçp m·ªói ng√†y"
Sprint --> Increment : "T·∫°o s·∫£n ph·∫©m ho√†n ch·ªânh"
Increment --> Review : "Tr√¨nh b√†y s·∫£n ph·∫©m"
Review --> Retro : "Ph·∫£n h·ªìi & c·∫£i ti·∫øn"
Retro --> Backlog : "C·∫≠p nh·∫≠t backlog"
@enduml'''

def main():
    st.set_page_config(
        page_title="The UML diagram Generator",
        page_icon="ü§ñ",
        layout="centered",
        initial_sidebar_state="expanded",
    )
    st.html("""<h1 style="text-align: center; color: #6ca395;">ü§ñ <i>The UML diagram Generator</i> üí¨</h1>""")

    with st.sidebar:
        model_option = st.radio("Ch·ªçn AI Model", ["Anthropic Claude", "OpenAI GPT"])
        openai_models = {
            "GPT-4o": "gpt-4o-2024-08-06",
            "GPT-4.1": "gpt-4.1-2025-04-14",
            "GPT-4o Mini": "gpt-4o-mini",
            "GPT-3.5 Turbo": "gpt-3.5-turbo"
        }
        anthropic_models = {
            "Claude 3.7 Sonnet": "claude-3-7-sonnet-latest",
            "Claude 3.5 Sonnet": "claude-3-5-sonnet-latest",
            "Claude 3.5 Haiku": "claude-3-5-haiku-latest",
        }
        if model_option == "OpenAI GPT":
            model_name = st.selectbox("Ch·ªçn model GPT", list(openai_models.keys()), index=0)
            selected_model = openai_models[model_name]
        else:
            model_name = st.selectbox("Ch·ªçn model Claude", list(anthropic_models.keys()), index=0)
            selected_model = anthropic_models[model_name]

        default_anthropic_api_key = os.getenv("ANTHROPIC_API_KEY") or ""
        default_openai_api_key = os.getenv("OPENAI_API_KEY") or ""
        anthropic_api_key = ""
        openai_api_key = ""
        if model_option == "Anthropic Claude":
            with st.popover("üîê Anthropic"):
                anthropic_api_key = st.text_input(
                    "Introduce your Anthropic API Key (https://console.anthropic.com/)",
                    value=default_anthropic_api_key, type="password"
                )
        else:
            with st.popover("üîê OpenAI"):
                openai_api_key = st.text_input(
                    "Introduce your OpenAI API Key (https://platform.openai.com/)",
                    value=default_openai_api_key, type="password"
                )

    st.markdown("### Nh·∫≠p danh s√°ch User Story (m·ªói d√≤ng l√† m·ªôt user story)")
    user_story_input = st.text_area("Nh·∫≠p user story ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ import t·ª´ file", height=200)
    uploaded_us_file = st.file_uploader("Import user story t·ª´ file .docx ho·∫∑c .txt", type=["docx", "txt"])

    user_stories = []
    if uploaded_us_file is not None:
        if uploaded_us_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            doc = docx.Document(uploaded_us_file)
            user_stories = assign_story_ids([para.text.strip() for para in doc.paragraphs if para.text.strip()])
        elif uploaded_us_file.type == "text/plain":
            content = uploaded_us_file.getvalue().decode("utf-8")
            user_stories = assign_story_ids([line.strip() for line in content.splitlines() if line.strip()])
        st.success(f"ƒê√£ import {len(user_stories)} user story t·ª´ file.")
    elif user_story_input.strip():
        user_stories = assign_story_ids([line.strip() for line in user_story_input.splitlines() if line.strip()])
    text = ""
    # ...sau khi ph√¢n lo·∫°i...
    if user_stories:
        st.write("### Danh s√°ch User Story ƒë√£ nh·∫≠p:")
        st.write(user_stories)

        if st.button("Ph√¢n lo·∫°i user story (Function/Non-Function)"):
            with st.spinner("ƒêang ph√¢n lo·∫°i..."):
                result = classify_user_story([s["text"] for s in user_stories], selected_model, anthropic_api_key, openai_api_key)
            st.session_state["functional_stories"] = assign_story_ids(result.get("Functional", []))
            st.session_state["non_functional_stories"] = assign_story_ids(result.get("Non-Functional", []))
            st.write("### Functional User Stories (JSON)")
            st.json(st.session_state["functional_stories"])
            st.write("### Non-Functional User Stories (JSON)")
            st.json(st.session_state["non_functional_stories"])

    # ƒê·∫£m b·∫£o functional_stories v√† non_functional_stories lu√¥n t·ªìn t·∫°i trong session_state
    if "functional_stories" not in st.session_state:
        st.session_state["functional_stories"] = []
    if "non_functional_stories" not in st.session_state:
        st.session_state["non_functional_stories"] = []

    # T·∫°o tab cho ch·ª©c nƒÉng v√† phi ch·ª©c nƒÉng
    tab1, tab2 = st.tabs(["Ch·ª©c nƒÉng (Functional)", "Phi ch·ª©c nƒÉng (Non-Functional)"])
    # --- Tab 1: Functional ---
    with tab1:
        functional_stories = st.session_state.get("functional_stories", [])
        st.write("### Functional User Stories")
        st.json(functional_stories)
        # --- Th√™m m·ªõi user story ---
        with st.expander("‚ûï Th√™m user story m·ªõi (Functional)"):
            new_story_text = st.text_area("Nh·∫≠p n·ªôi dung user story m·ªõi", key="new_func_story")
            if st.button("Th√™m user story (Functional)", key="add_func_story"):
                if new_story_text.strip():
                    new_story = {"id": str(uuid.uuid4()), "text": new_story_text.strip()}
                    st.session_state["functional_stories"].append(new_story)
                    st.success("ƒê√£ th√™m user story m·ªõi!")
                    st.rerun()
        # --- S·ª≠a/X√≥a user story ---
        for story in functional_stories:
            col1, col2, col3 = st.columns([7,1,1])
            with col1:
                st.write(story["text"])
            with col2:
                if st.button("‚úèÔ∏è", key=f"edit_func_{story['id']}"):
                    st.session_state["editing_func_story"] = story["id"]
            with col3:
                if st.button("üóëÔ∏è", key=f"delete_func_{story['id']}"):
                    st.session_state["functional_stories"] = [s for s in functional_stories if s["id"] != story["id"]]
                    st.success("ƒê√£ x√≥a user story!")
                    st.rerun()
            # Hi·ªÉn th·ªã form s·ª≠a n·∫øu ƒëang ch·ªçn story n√†y
            if st.session_state.get("editing_func_story") == story["id"]:
                new_text = st.text_area("S·ª≠a n·ªôi dung user story", value=story["text"], key=f"edit_text_func_{story['id']}")
                if st.button("L∆∞u", key=f"save_func_{story['id']}"):
                    for s in st.session_state["functional_stories"]:
                        if s["id"] == story["id"]:
                            s["text"] = new_text.strip()
                    st.session_state["editing_func_story"] = None
                    st.success("ƒê√£ c·∫≠p nh·∫≠t user story!")
                    st.rerun()
                if st.button("H·ªßy", key=f"cancel_func_{story['id']}"):
                    st.session_state["editing_func_story"] = None
                    st.rerun()
        # T·∫°o Kanban v√† Sprint
        tab_name = "Functional"
        stories = functional_stories
        status_options = ["To Do", "In Progress", "Done"]
        us_key = f"us_status_{tab_name}"
        if us_key not in st.session_state:
            st.session_state[us_key] = {story["id"]: "To Do" for story in stories}
        for story in stories:
            if story["id"] not in st.session_state[us_key]:
                st.session_state[us_key][story["id"]] = "To Do"
        st.write("## Kanban User Story Board")
        cols = st.columns(3)
        for idx, status in enumerate(status_options):
            with cols[idx]:
                st.markdown(f"#### {status}")
                for story in [s for s in stories if st.session_state[us_key].get(s["id"]) == status]:
                    st.write(story["text"])
                    col1, col2 = st.columns([1, 1])
                    with col1:
                        if status != "To Do" and st.button("‚óÄÔ∏è", key=f"move_left_{story['id']}"):
                            prev_status = status_options[status_options.index(status) - 1]
                            st.session_state[us_key][story["id"]] = prev_status
                            st.rerun()
                    with col2:
                        if status != "Done" and st.button("‚ñ∂Ô∏è", key=f"move_right_{story['id']}"):
                            next_status = status_options[status_options.index(status) + 1]
                            st.session_state[us_key][story["id"]] = next_status
                            st.rerun()
        st.write("## Qu·∫£n l√Ω Sprint")
        sprint_key = f"sprints_{tab_name}"
        if sprint_key not in st.session_state:
            st.session_state[sprint_key] = []
        new_sprint = st.text_input(f"T√™n Sprint m·ªõi ({tab_name})", key=f"new_sprint_name_{tab_name}")
        if st.button(f"T·∫°o Sprint m·ªõi ({tab_name})"):
            if new_sprint and new_sprint not in [s["name"] for s in st.session_state[sprint_key]]:
                st.session_state[sprint_key].append({"name": new_sprint, "stories": []})
        for sprint in st.session_state[sprint_key]:
            st.markdown(f"### {sprint['name']}")
            selected_stories = st.multiselect(
                f"Ch·ªçn user story cho {sprint['name']}",
                options=[s["id"] for s in stories],
                format_func=lambda sid: next((s["text"] for s in stories if s["id"] == sid), sid),
                default=sprint["stories"],
                key=f"{sprint_key}_{sprint['name']}_stories"
            )
            sprint["stories"] = selected_stories
        if st.button("ü§ñ Generate UML Diagram (Functional)"):
            prompt_stories = [s["text"] for s in stories]
            prompt = f"""
                json{prompt_stories}

                B·∫°n l√† chuy√™n gia ph√¢n t√≠ch h·ªá th·ªëng ph·∫ßn m·ªÅm. H√£y th·ª±c hi·ªán c√°c b∆∞·ªõc sau v√† ch·ªâ tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t v·ªõi 2 tr∆∞·ªùng: \"class\", \"sequence\". 
                **Y√äU C·∫¶U B·∫ÆT BU·ªòC:** M·ªói tr∆∞·ªùng trong JSON ph·∫£i lu√¥n c√≥ ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng con nh∆∞ m√¥ t·∫£ d∆∞·ªõi ƒë√¢y, k·ªÉ c·∫£ khi kh√¥ng c√≥ d·ªØ li·ªáu th√¨ tr·∫£ v·ªÅ m·∫£ng r·ªóng.

                **PH·∫¶N 1: Class Diagram**
                - Li·ªát k√™ t·∫•t c·∫£ c√°c class, thu·ªôc t√≠nh, ph∆∞∆°ng th·ª©c.
                - Li·ªát k√™ t·∫•t c·∫£ c√°c m·ªëi quan h·ªá gi·ªØa c√°c class (Association, Aggregation, Composition, Inheritance).
                - M·ªói quan h·ªá ph·∫£i c√≥ tr∆∞·ªùng \"RelationshipType\" (v√≠ d·ª•: Association, Aggregation, ...), v√† \"Multiplicity\" (v√≠ d·ª•: 1-1, 1-n, n-n, ho·∫∑c r·ªóng n·∫øu kh√¥ng x√°c ƒë·ªãnh).
                - N·∫øu kh√¥ng c√≥ m·ªëi quan h·ªá n√†o, tr·∫£ v·ªÅ \"relationships\": [].
                Tr·∫£ v·ªÅ JSON:
                \"class\": {{
                    \"classes\": [
                        {{
                            \"name\": \"ClassName\",
                            \"attributes\": [...],
                            \"methods\": [...]
                        }},
                        ...
                    ],
                    \"relationships\": [
                        [\"Class1\", \"Class2\", \"RelationshipType\", \"Multiplicity\"],
                        ...
                    ]
                }}

                **PH·∫¶N 2: Sequence Diagram**
                - Li·ªát k√™ c√°c ƒë·ªëi t∆∞·ª£ng (objects/lifelines) tham gia v√†o k·ªãch b·∫£n ch√≠nh.
                - Li·ªát k√™ c√°c th√¥ng ƒëi·ªáp (messages) trao ƒë·ªïi gi·ªØa c√°c ƒë·ªëi t∆∞·ª£ng theo th·ª© t·ª± th·ªùi gian.
                - N·∫øu kh√¥ng c√≥ ƒë·ªëi t∆∞·ª£ng ho·∫∑c th√¥ng ƒëi·ªáp n√†o, tr·∫£ v·ªÅ m·∫£ng r·ªóng.
                Tr·∫£ v·ªÅ JSON:
                \"sequence\": {{
                    \"objects\": [...],
                    \"messages\": [[\"Sender\", \"Receiver\", \"Message\"], ...]
                }}

                **L∆ØU √ù QUAN TR·ªåNG:**  
                - JSON tr·∫£ v·ªÅ ph·∫£i lu√¥n c√≥ ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng nh∆∞ tr√™n, k·ªÉ c·∫£ khi kh√¥ng c√≥ d·ªØ li·ªáu th√¨ tr·∫£ v·ªÅ m·∫£ng r·ªóng.
                - Kh√¥ng ƒë∆∞·ª£c b·ªè s√≥t b·∫•t k·ª≥ tr∆∞·ªùng n√†o.
                - Kh√¥ng tr·∫£ v·ªÅ gi·∫£i th√≠ch, ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t theo c·∫•u tr√∫c tr√™n.
                """
            if model_option == "Anthropic Claude":
                client = anthropic.Client(api_key=anthropic_api_key)
                message = client.messages.create(
                    model=selected_model,
                    max_tokens=8096,
                    messages=[{"role": "user", "content": prompt}],
                    temperature=1,
                )
                response_text = message.content[0].text
            else:
                openai.api_key = openai_api_key
                response = openai.chat.completions.create(
                    model=selected_model,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=11000,
                    temperature=0.1,
                )
                response_text = response.choices[0].message.content
            match = re.search(r'```json\n(.*?)\n```', response_text, re.DOTALL)
            data = json.loads(match.group(1)) if match else json.loads(response_text)
            class_data = data["class"]
            sequence_data = data["sequence"]
            st.write("### Class Diagram Data (JSON)")
            st.json(class_data)
            st.write("### Sequence Diagram Data (JSON)")
            st.json(sequence_data)
            plantuml_class = generate_class_plantuml(class_data)
            plantuml_sequence = generate_sequence_plantuml(sequence_data)
            plantuml_server = "http://www.plantuml.com/plantuml/png/"
            plantuml = PlantUML(url=plantuml_server)
            st.write("## Class Diagram")
            st.code(plantuml_class, language="uml")
            uml_file_cl = "diagram_class.puml"
            with open(uml_file_cl, "w", encoding="utf-8") as f:
                f.write(plantuml_class)
            plantuml.processes_file(uml_file_cl)
            uml_image_file_cl = "diagram_class.png"
            plantuml.processes_file(uml_file_cl, outfile=uml_image_file_cl)
            st.image(uml_image_file_cl, caption="Generated Class Diagram")
            st.write("## Sequence Diagram")
            st.code(plantuml_sequence, language="uml")
            uml_file_sq = "diagram_sequence.puml"
            with open(uml_file_sq, "w", encoding="utf-8") as f:
                f.write(plantuml_sequence)
            plantuml.processes_file(uml_file_sq)
            uml_image_file_sq = "diagram_sequence.png"
            plantuml.processes_file(uml_file_sq, outfile=uml_image_file_sq)
            st.image(uml_image_file_sq, caption="Generated Sequence Diagram")
            st.write("## Download PlantUML files")
            st.markdown(f'<a href="data:file/txt;base64,{file_to_base64(uml_file_cl).decode()}" download="{uml_file_cl}">Download Class PlantUML</a>', unsafe_allow_html=True)
            st.markdown(f'<a href="data:file/txt;base64,{file_to_base64(uml_file_sq).decode()}" download="{uml_file_sq}">Download Sequence PlantUML</a>', unsafe_allow_html=True)
            st.write("## Download Images")
            st.markdown(f'<a href="data:image/png;base64,{file_to_base64(uml_image_file_cl).decode()}" download="{uml_image_file_cl}">Download Class Image</a>', unsafe_allow_html=True)
            st.markdown(f'<a href="data:image/png;base64,{file_to_base64(uml_image_file_sq).decode()}" download="{uml_image_file_sq}">Download Sequence Image</a>', unsafe_allow_html=True)

    # --- Tab 2: Non-Functional ---
    with tab2:
        non_functional_stories = st.session_state.get("non_functional_stories", [])
        st.write("### Non-Functional User Stories")
        st.json(non_functional_stories)
        # --- Th√™m m·ªõi user story ---
        with st.expander("‚ûï Th√™m user story m·ªõi (Non-Functional)"):
            new_story_text_nf = st.text_area("Nh·∫≠p n·ªôi dung user story m·ªõi", key="new_nonfunc_story")
            if st.button("Th√™m user story (Non-Functional)", key="add_nonfunc_story"):
                if new_story_text_nf.strip():
                    new_story = {"id": str(uuid.uuid4()), "text": new_story_text_nf.strip()}
                    st.session_state["non_functional_stories"].append(new_story)
                    st.success("ƒê√£ th√™m user story m·ªõi!")
                    st.rerun()
        # --- S·ª≠a/X√≥a user story ---
        for story in non_functional_stories:
            col1, col2, col3 = st.columns([7,1,1])
            with col1:
                st.write(story["text"])
            with col2:
                if st.button("‚úèÔ∏è", key=f"edit_nonfunc_{story['id']}"):
                    st.session_state["editing_nonfunc_story"] = story["id"]
            with col3:
                if st.button("üóëÔ∏è", key=f"delete_nonfunc_{story['id']}"):
                    st.session_state["non_functional_stories"] = [s for s in non_functional_stories if s["id"] != story["id"]]
                    st.success("ƒê√£ x√≥a user story!")
                    st.rerun()
            # Hi·ªÉn th·ªã form s·ª≠a n·∫øu ƒëang ch·ªçn story n√†y
            if st.session_state.get("editing_nonfunc_story") == story["id"]:
                new_text = st.text_area("S·ª≠a n·ªôi dung user story", value=story["text"], key=f"edit_text_nonfunc_{story['id']}")
                if st.button("L∆∞u", key=f"save_nonfunc_{story['id']}"):
                    for s in st.session_state["non_functional_stories"]:
                        if s["id"] == story["id"]:
                            s["text"] = new_text.strip()
                    st.session_state["editing_nonfunc_story"] = None
                    st.success("ƒê√£ c·∫≠p nh·∫≠t user story!")
                    st.rerun()
                if st.button("H·ªßy", key=f"cancel_nonfunc_{story['id']}"):
                    st.session_state["editing_nonfunc_story"] = None
                    st.rerun()
        # T·∫°o Kanban v√† Sprint
        tab_name = "NonFunctional"
        stories = non_functional_stories
        status_options = ["To Do", "In Progress", "Done"]
        us_key = f"us_status_{tab_name}"
        if us_key not in st.session_state:
            st.session_state[us_key] = {story["id"]: "To Do" for story in stories}
        for story in stories:
            if story["id"] not in st.session_state[us_key]:
                st.session_state[us_key][story["id"]] = "To Do"
        st.write("## Kanban User Story Board")
        cols = st.columns(3)
        for idx, status in enumerate(status_options):
            with cols[idx]:
                st.markdown(f"#### {status}")
                for story in [s for s in stories if st.session_state[us_key].get(s["id"]) == status]:
                    st.write(story["text"])
                    col1, col2 = st.columns([1, 1])
                    with col1:
                        if status != "To Do" and st.button("‚óÄÔ∏è", key=f"move_left_{story['id']}"):
                            prev_status = status_options[status_options.index(status) - 1]
                            st.session_state[us_key][story["id"]] = prev_status
                            st.rerun()
                    with col2:
                        if status != "Done" and st.button("‚ñ∂Ô∏è", key=f"move_right_{story['id']}"):
                            next_status = status_options[status_options.index(status) + 1]
                            st.session_state[us_key][story["id"]] = next_status
                            st.rerun()
        st.write("## Qu·∫£n l√Ω Sprint")
        sprint_key = f"sprints_{tab_name}"
        if sprint_key not in st.session_state:
            st.session_state[sprint_key] = []
        new_sprint = st.text_input(f"T√™n Sprint m·ªõi ({tab_name})", key=f"new_sprint_name_{tab_name}")
        if st.button(f"T·∫°o Sprint m·ªõi ({tab_name})"):
            if new_sprint and new_sprint not in [s["name"] for s in st.session_state[sprint_key]]:
                st.session_state[sprint_key].append({"name": new_sprint, "stories": []})
        for sprint in st.session_state[sprint_key]:
            st.markdown(f"### {sprint['name']}")
            selected_stories = st.multiselect(
                f"Ch·ªçn user story cho {sprint['name']}",
                options=[s["id"] for s in stories],
                format_func=lambda sid: next((s["text"] for s in stories if s["id"] == sid), sid),
                default=sprint["stories"],
                key=f"{sprint_key}_{sprint['name']}_stories"
            )
            sprint["stories"] = selected_stories
        if st.button("ü§ñ Generate Deployment Diagram (Non-Functional)"):
            prompt_stories = [s["text"] for s in stories]
            deployment_prompt = f"""
            {prompt_stories}\n\nB·∫°n l√† chuy√™n gia ph√¢n t√≠ch h·ªá th·ªëng ph·∫ßn m·ªÅm. H√£y ph√¢n t√≠ch c√°c y√™u c·∫ßu phi ch·ª©c nƒÉng tr√™n v√† tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t m√¥ t·∫£ deployment diagram v·ªõi c√°c tr∆∞·ªùng sau:\n\n{{\n  \"components\": [{{\"name\": \"NodeName\", \"services\": [\"Service1\", ...]}}, ...],\n  \"relationships\": [[\"Node1\", \"Node2\", \"K·∫øt n·ªëi ho·∫∑c giao th·ª©c\"], ...]\n}}\n\n- Lu√¥n tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng nh∆∞ tr√™n, k·ªÉ c·∫£ khi kh√¥ng c√≥ d·ªØ li·ªáu th√¨ tr·∫£ v·ªÅ m·∫£ng r·ªóng.\n- Kh√¥ng gi·∫£i th√≠ch, ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t.\n"""
            if model_option == "Anthropic Claude":
                client = anthropic.Client(api_key=anthropic_api_key)
                message = client.messages.create(
                    model=selected_model,
                    max_tokens=8096,
                    messages=[{"role": "user", "content": deployment_prompt}],
                    temperature=1,
                )
                deployment_response_text = message.content[0].text
            else:
                openai.api_key = openai_api_key
                deployment_response = openai.chat.completions.create(
                    model=selected_model,
                    messages=[{"role": "user", "content": deployment_prompt}],
                    max_tokens=4096,
                    temperature=0.1,
                )
                deployment_response_text = deployment_response.choices[0].message.content
            match_dep = re.search(r'```json\n(.*?)\n```', deployment_response_text, re.DOTALL)
            deployment_data = json.loads(match_dep.group(1)) if match_dep else json.loads(deployment_response_text)
            st.write("### Deployment Diagram Data (JSON)")
            st.json(deployment_data)
            plantuml_deployment = generate_deployment_plantuml(deployment_data)
            plantuml_server = "http://www.plantuml.com/plantuml/png/"
            plantuml = PlantUML(url=plantuml_server)
            st.write("## Deployment Diagram")
            st.code(plantuml_deployment, language="uml")
            uml_file_dp = "diagram_deployment.puml"
            with open(uml_file_dp, "w", encoding="utf-8") as f:
                f.write(plantuml_deployment)
            plantuml.processes_file(uml_file_dp)
            uml_image_file_dp = "diagram_deployment.png"
            plantuml.processes_file(uml_file_dp, outfile=uml_image_file_dp)
            st.image(uml_image_file_dp, caption="Generated Deployment Diagram")
            st.write("## Download PlantUML file")
            st.markdown(f'<a href="data:file/txt;base64,{file_to_base64(uml_file_dp).decode()}" download="{uml_file_dp}">Download Deployment PlantUML</a>', unsafe_allow_html=True)
            st.write("## Download Image")
            st.markdown(f'<a href="data:image/png;base64,{file_to_base64(uml_image_file_dp).decode()}" download="{uml_image_file_dp}">Download Deployment Image</a>', unsafe_allow_html=True)
        if st.button("ü§ñ Show Agile Process Diagram"):
            agile_plantuml = generate_agile_process_plantuml()
            plantuml_server = "http://www.plantuml.com/plantuml/png/"
            plantuml = PlantUML(url=plantuml_server)
            st.write("## Agile Process Diagram (Scrum)")
            st.code(agile_plantuml, language="uml")
            uml_file_agile = "diagram_agile.puml"
            with open(uml_file_agile, "w", encoding="utf-8") as f:
                f.write(agile_plantuml)
            plantuml.processes_file(uml_file_agile)
            uml_image_file_agile = "diagram_agile.png"
            plantuml.processes_file(uml_file_agile, outfile=uml_image_file_agile)
            st.image(uml_image_file_agile, caption="Agile/Scrum Process")
            st.write("## Download PlantUML file")
            st.markdown(f'<a href="data:file/txt;base64,{file_to_base64(uml_file_agile).decode()}" download="{uml_file_agile}">Download Agile PlantUML</a>', unsafe_allow_html=True)
            st.write("## Download Image")
            st.markdown(f'<a href="data:image/png;base64,{file_to_base64(uml_image_file_agile).decode()}" download="{uml_image_file_agile}">Download Agile Image</a>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()
